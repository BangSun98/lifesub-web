name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  # Team Settings
  TEAMID: dg0200
  ROOT_PROJECT: lifesub-web
  
  # Container Registry Settings
  REGISTRY: dg0200cr.azurecr.io
  IMAGE_ORG: lifesub
  
  # Application Settings
  REPLICAS: 1
  EXPORT_PORT: 18080
  
  # Backend Service URLs
  REACT_APP_MEMBER_URL: http://20.249.185.127/member
  REACT_APP_MYSUB_URL: http://20.249.185.127/mysub
  REACT_APP_RECOMMEND_URL: http://20.249.185.127/recommend
  
  # Resource Settings
  RESOURCES_REQUESTS_CPU: 256m
  RESOURCES_REQUESTS_MEMORY: 256Mi
  RESOURCES_LIMITS_CPU: 1024m
  RESOURCES_LIMITS_MEMORY: 1024Mi

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build/

  release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.create_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Create image tag
        id: create_tag
        run: |
          tag=$(date +'%Y%m%d%H%M%S')
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build/
          
      - name: Azure Container Registry login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          
      - name: Build and push Docker image
        run: |
          docker build \
            --build-arg PROJECT_FOLDER="." \
            --build-arg REACT_APP_MEMBER_URL="${{ env.REACT_APP_MEMBER_URL }}" \
            --build-arg REACT_APP_MYSUB_URL="${{ env.REACT_APP_MYSUB_URL }}" \
            --build-arg REACT_APP_RECOMMEND_URL="${{ env.REACT_APP_RECOMMEND_URL }}" \
            --build-arg BUILD_FOLDER="deployment" \
            --build-arg EXPORT_PORT="${{ env.EXPORT_PORT }}" \
            -f deployment/Dockerfile-lifesub-web \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/lifesub-web:${{ steps.create_tag.outputs.tag }} .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/lifesub-web:${{ steps.create_tag.outputs.tag }}

  deploy:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ictcoe-edu
          cluster-name: ${{ env.TEAMID }}-aks
          
      - name: Create namespace
        run: |
          kubectl create namespace ${{ env.TEAMID }}-${{ env.ROOT_PROJECT }}-ns --dry-run=client -o yaml | kubectl apply -f -
          
      - name: Generate deployment manifest
        run: |
          export namespace=${{ env.TEAMID }}-${{ env.ROOT_PROJECT }}-ns
          export lifesub_web_image_path=${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/lifesub-web:${{ needs.release.outputs.image_tag }}
          export replicas=${{ env.REPLICAS }}
          export export_port=${{ env.EXPORT_PORT }}
          export resources_requests_cpu=${{ env.RESOURCES_REQUESTS_CPU }}
          export resources_requests_memory=${{ env.RESOURCES_REQUESTS_MEMORY }}
          export resources_limits_cpu=${{ env.RESOURCES_LIMITS_CPU }}
          export resources_limits_memory=${{ env.RESOURCES_LIMITS_MEMORY }}
          
          envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml
          cat deployment/deploy.yaml
          
      - name: Deploy to AKS
        run: |
          kubectl apply -f deployment/deploy.yaml
          
          echo "Waiting for deployment to be ready..."
          kubectl -n ${{ env.TEAMID }}-${{ env.ROOT_PROJECT }}-ns wait --for=condition=available deployment/lifesub-web --timeout=300s
          
          echo "Waiting for service external IP..."
          while [[ -z $(kubectl -n ${{ env.TEAMID }}-${{ env.ROOT_PROJECT }}-ns get svc lifesub-web -o jsonpath='{.status.loadBalancer.ingress[0].ip}') ]]; do
            sleep 5
          done
          echo "Service external IP: $(kubectl -n ${{ env.TEAMID }}-${{ env.ROOT_PROJECT }}-ns get svc lifesub-web -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"