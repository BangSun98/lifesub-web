name: Frontend CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  REGISTRY: dg0200cr.azurecr.io
  IMAGE_ORG: lifesub
  APP_NAME: lifesub-web
  NAMESPACE: dg0200-lifesub-web-ns

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-image-tag.outputs.image_tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          
      - name: Generate image tag
        id: set-image-tag
        run: |
          timestamp=$(date '+%Y%m%d%H%M%S')
          echo "image_tag=${timestamp}" >> $GITHUB_OUTPUT

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build
          
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile-lifesub-web
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/${{ env.APP_NAME }}:${{ needs.build.outputs.image_tag }}
          build-args: |
            PROJECT_FOLDER=.
            REACT_APP_MEMBER_URL=http://20.249.185.127/member
            REACT_APP_MYSUB_URL=http://20.249.185.127/mysub
            REACT_APP_RECOMMEND_URL=http://20.249.185.127/recommend
            BUILD_FOLDER=deployment
            EXPORT_PORT=18080

  deploy:
    needs: [build, release]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ictcoe-edu
          cluster-name: dg0200-aks
          
      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          
      - name: Generate deployment manifest
        run: |
          export namespace=${{ env.NAMESPACE }}
          export lifesub_web_image_path=${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/${{ env.APP_NAME }}:${{ needs.build.outputs.image_tag }}
          export replicas=1
          export export_port=18080
          export resources_requests_cpu=256m
          export resources_requests_memory=256Mi
          export resources_limits_cpu=1024m
          export resources_limits_memory=1024Mi
          
          envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml
          echo "Generated manifest:"
          cat deployment/deploy.yaml
          
      - name: Deploy to AKS
        run: |
          kubectl apply -f deployment/deploy.yaml
          kubectl -n ${{ env.NAMESPACE }} wait --for=condition=available deployment/lifesub-web --timeout=300s
          
          echo "Waiting for service external IP..."
          while [[ -z $(kubectl -n ${{ env.NAMESPACE }} get svc lifesub-web -o jsonpath='{.status.loadBalancer.ingress[0].ip}') ]]; do
            sleep 5
          done
          echo "Service external IP: $(kubectl -n ${{ env.NAMESPACE }} get svc lifesub-web -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"